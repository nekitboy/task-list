@startuml

title __TASKS's Class Diagram__\n

class com.codurance.training.tasks.App {
    {static} + main()
}
  

class com.codurance.training.tasks.Console {
    + writer : PrintWriter
    - reader : BufferedReader
    + Console()
    + getReader()
    + printError()
    + printNewLine()
    + printWithNewLine()
    + readCommand()
    - printPrompt()
}
  

class com.codurance.training.tasks.Project {
    - name : String
    - tasksIds : Map<Long, Boolean>
    + Project()
    + addTask()
    + deleteTask()
    + getName()
    + getTasksIds()
}
  

class com.codurance.training.tasks.Task {
    {static} # lastId : long
    - deadline : LocalDate
    - description : String
    - done : boolean
    - id : long
    + Task()
    + Task()
    + getDeadline()
    + getDescription()
    + getId()
    + isDone()
    + setDeadline()
    + setDone()
    {static} - nextId()
}
  

class com.codurance.training.tasks.TaskList {
    - projects : Map<String, Project>
    - tasksPool : Map<Long, Task>
    + TaskList()
    + run()
}
  

com.codurance.training.tasks.TaskList .up.|> java.lang.Runnable
com.codurance.training.tasks.TaskList o-- com.codurance.training.tasks.Console : console


abstract class com.codurance.training.tasks.actions.Action {
  # command : String
  + Action()
  + Action()
  + Action()
  {abstract} + execute()
  # print()
}


class com.codurance.training.tasks.actions.ActionFactory {
  {static} + read()
  - ActionFactory()
}

enum ActionStatus {
NONE
QUIT
}


com.codurance.training.tasks.actions.Action o-- com.codurance.training.tasks.Console : console



class com.codurance.training.tasks.actions.impl.ActionAdd {
    - projects : Map<String, Project>
    - tasks : Map<Long, Task>
    + ActionAdd()
    + execute()
    - addProject()
    - addTask()
}


class com.codurance.training.tasks.actions.impl.ActionCheck {
    - isDone : boolean
    + ActionCheck()
    + execute()
}



class com.codurance.training.tasks.actions.impl.ActionDeadline {
    + ActionDeadline()
    + execute()
}


class com.codurance.training.tasks.actions.impl.ActionDelete {
    - projects : Map<String, Project>
    + ActionDelete()
    + execute()
    - deleteFromProject()
}

class com.codurance.training.tasks.actions.impl.ActionError {
    + execute()
}


class com.codurance.training.tasks.actions.impl.ActionHelp {
    + ActionHelp()
    + execute()
}


class com.codurance.training.tasks.actions.impl.ActionQuit {
    + execute()
}


class com.codurance.training.tasks.actions.impl.ActionShare {
    - projects : Map<String, Project>
    - tasks : Map<Long, Task>
    + ActionShare()
    + execute()
    - shareTask()
}


class com.codurance.training.tasks.actions.impl.ActionShow {
    + ActionShow()
    + execute()
}

class com.codurance.training.tasks.actions.impl.ActionToday {
    + ActionToday()
    + execute()
}


com.codurance.training.tasks.actions.impl.ActionAdd -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionCheck -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionDeadline -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionDelete -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionError -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionHelp -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionQuit -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionShare -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionShow -up-|> com.codurance.training.tasks.actions.Action
com.codurance.training.tasks.actions.impl.ActionToday -up-|> com.codurance.training.tasks.actions.Action



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
